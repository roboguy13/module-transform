###

predicate Name(loc x) {
| true => { x :-> v }
}

predicate ModName(loc x) {
| true => { x :-> v ** Name(v) }
}

predicate ParamList(loc x, set names, set mns) {
| x == 0 => { mns == {} ; emp }
| x != 0 => { names == {name} + names1 /\ mns == {mn} + mns1 ; [x, 3] ** x :-> name ** (x + 1) :-> mn ** (x + 2) :-> rest ** Name(name) ** ModName(mn) ** ParamList(rest, names1, mns1) }
}

// Parametrized module
predicate PModule(loc x, set names, set mns) {
| true => { [x, 2] ** x :-> mn ** (x+1) :-> pl ** ModName(mn) ** ParamList(pl, names, mns) }
}

predicate ImportList(loc x, set mns) {
| x == 0 => { mns == {} ; emp }
| x != 0 => { mns == {mn} + mns1 ; [x, 2] ** x :-> mn ** x :-> rest ** ModName(mn) ** ImportList(rest, mns) }
}

// "Traditional" module
predicate TModule(loc x, set mns) {
| true => { [x, 2] ** x :-> mn ** (x+1) :-> ims ** ModName(mn) ** ImportList(ims, mns) }
}




void translate(loc x, loc ns, loc y)
{ x :-> a ** TModule(a, mns) }
{ x :-> a ** y :-> b ** TModule(a, mns) ** PModule(b, ns, mns) }

{
  ??
}

###

